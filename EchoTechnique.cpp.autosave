#include "EchoTechnique.h"

#include <QRegExp>
#include <QFile>
#include <QTextStream>
#include <QDebug>
#include <QQmlProperty>

EchoTechnique::EchoTechnique(QQuickItem *parentItem)
    : ParentItem(parentItem)
{
}

EchoTechnique::~EchoTechnique()
{
}

void EchoTechnique::render()
{
    glClearColor(0,0,0,0);
    glClear(GL_COLOR_BUFFER_BIT);
    glFrontFace(GL_CCW);
    glDisable(GL_DEPTH_TEST);

    Program.bind();

    QMap<QString, int>::const_iterator itr = Uniforms.constBegin();
    for (;itr != Uniforms.constEnd(); ++itr) {
        QQmlProperty prop(ParentItem, itr.key());
        //Program.setUniformValue(itr.value(), prop.read());
    }

    Program.enableAttributeArray(VertexAttr);
    Program.setAttributeArray(VertexAttr, Vertices.constData());
    glDrawArrays(GL_TRIANGLE_FAN, 0, Vertices.size());
    Program.disableAttributeArray(VertexAttr);
    Program.release();
    glEnable(GL_DEPTH_TEST);
}

void EchoTechnique::initialize()
{
    Timer.start();
    QOpenGLShader *vshader1 = new QOpenGLShader(QOpenGLShader::Vertex, &Program);
    const char *vsrc1 =
        "attribute highp vec4 vertex;\n"
        "void main(void)\n"
        "{\n"
        "    gl_Position = vertex;\n"
        "}\n";
    vshader1->compileSourceCode(vsrc1);

    QOpenGLShader *fshader1 = new QOpenGLShader(QOpenGLShader::Fragment, &Program);
    fshader1->compileSourceFile( "echo.frag" );

    Program.addShader(vshader1);
    Program.addShader(fshader1);
    Program.link();

    // gatheter all uniforms
    QRegExp regexp;
    regexp.setPatternSyntax(QRegExp::RegExp2);
    regexp.setPattern("^uniform [a-zA-Z0-9 ]+ ([a-zA-Z0-9_]*);");
    QFile file( "echo.frag" );
    file.open(QIODevice::ReadOnly | QIODevice::Text);
    QTextStream in(&file);
    while (!in.atEnd()){
        QString line = in.readLine();
        if (regexp.indexIn(line, 0) != -1){
            QString uniform_name = regexp.cap(1);
            Uniforms[uniform_name] = Program.uniformLocation(uniform_name);
        }
    }
    qDebug() << Uniforms;

    VertexAttr = Program.attributeLocation("vertex");
    int r = Program.uniformLocation("resolution");
    qDebug() << r;
//    Time = Program.uniformLocation("time");

    Vertices.clear();
    Vertices << QVector3D(-1,-1,0);
    Vertices << QVector3D( 1,-1,0);
    Vertices << QVector3D( 1, 1,0);
    Vertices << QVector3D(-1, 1,0);
}
/*
 *    ScreenCapture {
        id: echo_rect
        width : parent.echo_size
        height: parent.echo_size
        anchors.right: controls_rect.left
        anchors.top: parent.top
        anchors.bottom: parent.bottom
        anchors.left: parent.left

        property real elapsed_time: 0

        Timer {
            interval: 10
            running: true
            repeat: true
            onTriggered: parent.elapsed_time += interval * 0.001
        }

        ShaderEffect {
            id: echo
            anchors.fill: parent
            property variant resolution: Qt.size(width,height)
            property real time: parent.elapsed_time

            property variant center_offset: Qt.size(0.0,0.0)
            property real darkness: 0.2
            property real animation_mod: 1.0
            property real animation_from_center_mod: 1.0/8.0
            property real contrast_str: 5.0
            property real object_density: 24.0

            MouseArea {
                anchors.fill: parent
                onClicked: {
                    console.log("saving img")
                    //screen.capture("test_img4.png")
                }
            }
        }
*/
